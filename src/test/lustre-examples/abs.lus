(*
TODO:
Consider Blame and cut sets: Need to 
Create pull request: realizability -> settings menu -> IVC/MCS. Seperately.
  - Clean up prints, comments, etc
  - Think about design and ensure the design choices make sense
Webview panel for records and arrays:
  - Need default values from kind2 to fill in default inputs (use interpret functionality of kind2)
  - Provide ways to input arrays (probably popout view, potentially a treeview in that, start simple for low dimensions)
  - Records seemingly not working at all?
*)

(* Ideas to explore:
  Move the "Raw output" functionality to the settings menu instead of a button (with a toggle for raw JSON)
  Think about the best design for the Analysis class (The solution I proposed earlier this week was pasable but I feel less than extendable, not implemented)
    - The container for the selection options should be the central data structure when we display these properties, not Analysis itself (not convinced)
    - Or, could do the original solution and have different "types" of analyses
    - Will explore solutions next week ( Will be included in IVC/MCS PR)
*)


function AbsSpecAndBodyIVC(n:int) returns (r:int);
(*@contract
  guarantee "forall (n: int) abs(n) >= 0" r >= 0;
  guarantee "forall (n: int) n>=0 => abs(n)=n" n>=0 => r = n;
  guarantee "forall (n: int) n<0 => abs(n)=-n" n<0 => r = -n;
*)
let
  if n >= 0 then
    r = n;
  else
    r = negate(n);
  fi
tel

function negate(n:int) returns (r:int);
(*@contract
  guarantee    "forall (n: int) negate(n) = -n" r = -n;
*)
let
  r=-n;
tel

function AbsSpecAndBody(n:int) returns (r:int);
(*@contract
  guarantee "forall (n: int) abs(n) >= 0" r >= 0;
  guarantee "forall (n: int) n>=0 => abs(n)=n" n>=0 => r = n;
  guarantee "forall (n: int) n<0 => abs(n)=-n" n<0 => r = -n;
*)
let
  if n >= 0 then
    r = n;
  else
    r = -n;
  fi
tel


function AbsSpecAndBodyFailed(n:int) returns (r:int);
(*@contract
  guarantee "forall (n: int) abs(n) >= 0" r >= 1;
  guarantee "forall (n: int) n>=0 => abs(n)=n" 
  n>=0 => r = n;
  guarantee "forall (n: int) n<0 => abs(n)=-n" n<0 => r = -n;
*)
let
  if n >= 0 then
    r = n;
  else
    r = -n;
  fi
tel

function imported AbsSpec(n:int) returns (r:int);
(*@contract
  guarantee "forall (n: int) abs(n) >= 0" r >= 0;
  guarantee "forall (n: int) n>=0 => abs(n)=n" n>=0 => r = n;
  guarantee "forall (n: int) n<0 => abs(n)=-n" n<0 => r = -n;
*)

function imported AbsSpecUnrealizable(n:int) returns (r:int);
(*@contract
  guarantee "forall (n: int) abs(n) >= 0" r >= 1;
  guarantee "forall (n: int) n>=0 => abs(n)=n" n>=0 => r = n;
  guarantee "forall (n: int) n<0 => abs(n)=-n" n<0 => r = -n;
*)


type T = int;
type Nat = subtype { x: int | x > 0 };

node N (x: T) returns (y: T)
let
    y = x;
    check x = y;
tel







(* Hover fail icons and it would say fn is unrealizable
  hover guaruntes and show info that guaruntees are conflicting
  Add same functionality for checking contracts

*)

(* Next steps: WHen you prove properties, kind 2 provides subset of 
model elemetns that are sufficient to prove that property
example: ./kind2 src/test/test.lus --ivc true
Highlight relevant lines (from start column to the end of the line) any edit to file must erase line
ivc feature should be toggleable (new button on top of extention)
temporary highlighting solution: highlight form start column to first semicolon
-- 
aDD HOVER for conflicting set INFO TO THE PANE ISTELF
Could add extra tab in the upper bar (file edit etc) for Kind2 flags

--
TODO later: for node calss may have to blaance parenthensis, OCaml modification to return end col as well as start
*)