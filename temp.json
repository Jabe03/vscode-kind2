{
    "kind2.smt_solver": {
        "type": "string",
        "scope": "machine-overridable",
        "enum": [
            "Z3",
            "CVC4",
            "Yices",
            "Yices2",
            "Boolector",
            "MathSAT"
        ],
        "description": "Set the main SMT solver",
        "default": "Z3"
    },
    "kind2.kind2.smt_solver_path": {
        "scope": "machine-overridable",
        "type": "string",
        "default": "",
        "description": "Path to the SMT solver backend used by kind2."
    },
    "kind2.smt_logic": {
        "type": "string",
        "scope": "machine-overridable",
        "enum": [
            "none",
            "detect"
        ],
        "description": "Select logic for SMT solvers",
        "default": "none"
    },
    "kind2.check_sat_assume": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Use check-sat with assumptions, or simulate with push/pop when false",
        "default": true
    },
    "kind2.smt_short_names": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Send short variables names to SMT solver, send full names if false",
        "default": true
    },
    "kind2.smt_trace": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Write all SMT commands to files",
        "default": false
    },
    "kind2.unroll_max": {
        "type": "integer",
        "scope": "machine-overridable",
        "minimum": 0,
        "maximum": 1000,
        "description": "Maximal number of iterations for BMC and k-induction",
        "default": 0
    },
    "kind2.bmc_check_unroll": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Check that the unrolling alone is satisfiable",
        "default": true
    },
    "kind2.ind_print_cex": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Print counterexamples to induction",
        "default": false
    },
    "kind2.ind_compress": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Compress inductive counterexamples",
        "default": true
    },
    "kind2.ind_compress_equal": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Compress inductive counterexamples for states equal modulo inputs",
        "default": true
    },
    "kind2.ind_compress_same_succ": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Compress inductive counterexamples for states with same successors",
        "default": false
    },
    "kind2.ind_compress_same_pred": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Compress inductive counterexamples for states with same predecessors",
        "default": false
    },
    "kind2.ind_lazy_invariants": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Asserts invariants lazily",
        "default": false
    },
    "kind2.ic3_check_inductive": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Check inductiveness of blocking clauses",
        "default": true
    },
    "kind2.ic3_inductively_generalize": {
        "type": "integer",
        "scope": "machine-overridable",
        "minimum": 1.0,
        "maximum": 2.0,
        "description": "Inductively generalize blocking clauses before forward propagation \n 0 = none \n 1 = normal IG \n 2 = IG with ordering",
        "default": 1
    },
    "kind2.ic3_block_in_future": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Block counterexample in future frames",
        "default": true
    },
    "kind2.ic3_block_in_future_first": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Block counterexample in future frames first before returning to frame",
        "default": true
    },
    "kind2.ic3_fwd_prop_non_gen": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Propagate clauses before generalization",
        "default": true
    },
    "kind2.ic3_fwd_prop_ind_gen": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Inductively generalize all clauses after forward propagation",
        "default": true
    },
    "kind2.ic3_fwd_prop_subsume": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Subsumption in forward propagation",
        "default": true
    },
    "kind2.ic3_use_invgen": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Use invariants from invariant generators",
        "default": true
    },
    "kind2.ic3_qe": {
        "type": "string",
        "scope": "machine-overridable",
        "enum": [
            "Z3",
            "Z3-impl",
            "Z3-impl2",
            "cooper"
        ],
        "description": "Choose quantifier elimination algorithm",
        "default": "cooper"
    },
    "kind2.ic3_extract": {
        "type": "string",
        "scope": "machine-overridable",
        "enum": [
            "first",
            "vars"
        ],
        "description": "Heuristics for extraction of implicant",
        "default": "first"
    },
    "kind2.ic3_abstr": {
        "type": "string",
        "scope": "machine-overridable",
        "enum": [
            "None",
            "IA"
        ],
        "description": "Choose method of abstraction in IC3",
        "default": "None"
    },
    "kind2.invgen_prune_trivial": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Invariant generation will only communicate invariants not implied by the transition relation",
        "default": true
    },
    "kind2.invgen_max_depth": {
        "type": "integer",
        "scope": "machine-overridable",
        "minimum": 0.0,
        "maximum": 1000.0,
        "description": "Maximal depth for graph-based invariant generation techniques",
        "default": 0
    },
    "kind2.invgen_max_succ": {
        "type": "integer",
        "scope": "machine-overridable",
        "minimum": 1.0,
        "maximum": 1000.0,
        "description": "Maximal number of successive iterations for subsystems",
        "default": 1
    },
    "kind2.invgen_lift_candidates": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Invariant generation will instantiate candidates from sub-nodes",
        "default": false
    },
    "kind2.invgen_top_only": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Only generate invariants for the top level",
        "default": false
    },
    "kind2.invgen_all_out": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Forces invariant generation to consider a huge number of candidates. Slower, but more likely to succeed",
        "default": false
    },
    "kind2.invgen_mine_trans": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Invariant generation will extract candidate terms from the transition predicate",
        "default": true
    },
    "kind2.invgen_two_state": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Run invariant generion in two state mode",
        "default": true
    },
    "kind2.invgen_bool_eq_only": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Forces bool invgen to look for equalities only",
        "default": false
    },
    "kind2.invgen_arith_eq_only": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Forces arith invgen to look for equalities only",
        "default": false
    },
    "kind2.invgen_renice": {
        "type": "integer",
        "scope": "machine-overridable",
        "minimum": 0.0,
        "maximum": 1000.0,
        "description": "Renice invariant generation process. Give a positive argument to lower priority",
        "default": ""
    },
    "kind2.c2i_dnf": {
        "type": "integer",
        "scope": "machine-overridable",
        "minimum": 3.0,
        "maximum": 1000.0,
        "description": "Number of disjuncts in the DNF constructed by C2I",
        "default": 3
    },
    "kind2.c2i_int_cubes": {
        "type": "integer",
        "scope": "machine-overridable",
        "minimum": 3.0,
        "maximum": 1000.0,
        "description": "Number of int cubes in the DNF constructed by C2I",
        "default": 3
    },
    "kind2.c2i_real_cubes": {
        "type": "integer",
        "scope": "machine-overridable",
        "minimum": 3.0,
        "maximum": 1000.0,
        "description": "Number of real cubes in the DNF constructed by C2I",
        "default": 3
    },
    "kind2.c2i_modes": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Activates mode subcandidates. Subsumes \"c2i_dnf_size\"",
        "default": true
    },
    "kind2.testgen": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Activates test generation for systems proved correct",
        "default": false
    },
    "kind2.testgen_graph_only": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Only draw the graph of reachable modes, do not log testcases",
        "default": false
    },
    "kind2.testgen_len": {
        "type": "integer",
        "scope": "machine-overridable",
        "minimum": 1.0,
        "maximum": 1000.0,
        "description": "Maximimum length for test generation",
        "default": 5
    },
    "kind2.interpreter_steps": {
        "type": "integer",
        "scope": "machine-overridable",
        "minimum": 0.0,
        "maximum": 1000.0,
        "description": "Run number of steps, override the number of steps given in the input file",
        "default": 0
    },
    "kind2.order_var_by_elim": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Order variables in polynomials by order of elimination",
        "default": false
    },
    "kind2.general_lbound": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Choose lower bounds containing variables",
        "default": false
    },
    "kind2.compositional": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Abstract subnodes with a contract",
        "default": false
    },
    "kind2.translate_contracts": {
        "type": "string",
        "scope": "machine-overridable",
        "enum": [
            "off"
        ],
        "description": "Translates a contracts in assertions / properties (experimental)",
        "default": "off"
    },
    "kind2.check_modes": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Checks the modes of a contracts are exhaustive",
        "default": true
    },
    "kind2.check_implem": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Checks the implementation of nodes",
        "default": true
    },
    "kind2.contract_gen": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Uses invariant generation to infer contracts for a lustre system. Providing contracts, properties and assertion helps but is not mandatory. Contracts will be written to the folder specified by --output_dir. (Kind 2 will actually try to use invariants logged in previous runs automatically, even if they are not  explicitely imported). See also --contract_gen_depth and --contract_gen_fine_grain",
        "default": false
    },
    "kind2.contract_gen_depth": {
        "type": "integer",
        "minimum": 0.0,
        "maximum": 1000.0,
        "description": "Controls the depth of exploration used to generate contracts. Note that invariant generation is expected to go faster as it unrolls (explores) the system",
        "default": 7
    },
    "kind2.refinement": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "(De)activates refinement in compositional reasoning",
        "default": true
    },
    "kind2.smt_arrays": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Use the builtin theory of arrays in solvers",
        "default": false
    },
    "kind2.inline_arrays": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Inline arrays whose bound is statically known",
        "default": true
    },
    "kind2.arrays_rec": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Define recursive functions for arrays (only if previously selected CVC4 as the SMT solver)",
        "default": false
    },
    "kind2.var_array_size": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Allow variable arrays size (Dangerous)",
        "default": false
    },
    "kind2.certif": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Produce SMT-LIB 2 certificates",
        "default": false
    },
    "kind2.proof": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Produce LFSC proofs",
        "default": false
    },
    "kind2.certif_abstr": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Use absrtact type indexes in certificates and proofs",
        "default": false
    },
    "kind2.log_trust": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Log trusted parts of the proof in a separate file for users to fill",
        "default": false
    },
    "kind2.certif_mink": {
        "type": "string",
        "scope": "machine-overridable",
        "enum": [
            "no",
            "fwd",
            "bwd",
            "dicho",
            "frontierdicho",
            "auto"
        ],
        "description": "Select strategy for minimizing k of certificates \n \"no\" for no minimization \n \"fwd\" for a search starting at 1 up to k \n \"bwd\" for a search starting at k and going down to 1 \n \"dicho\" for a binary search of the minimum k \n \"frontierdicho\" tries the frontier k/k-1 then employs the dicho stractegy \n \"auto\" to heuristically select the best strategy among the previous ones",
        "default": "auto"
    },
    "kind2.certif_mininvs": {
        "type": "string",
        "scope": "machine-overridable",
        "enum": [
            "easy",
            "medium",
            "mediumonly",
            "hard",
            "hardonly"
        ],
        "description": "Select strategy for minimizing the invariants of certificates \n \"easy\" to only do unsat-core based trimming \n \"medium\" does easy + coarse couter-example based minimization \n \"mediumonly\" does only coarse couter-example based minimization \n \"hard\" does easy + cherry-pick invariants based on couter-examples \n \"hardonly\" only cherry-picks invariants based on couter-examples",
        "default": "medium"
    },
    "kind2.only_user_candidates": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Only use user provided candidates for invariants",
        "default": false
    },
    "kind2.input_format": {
        "type": "string",
        "scope": "machine-overridable",
        "enum": [
            "lustre",
            "native",
            "extension"
        ],
        "description": "Format of input file",
        "default": "extension"
    },
    "kind2.log_invs": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Logs strengthening invariants as contracts after minimization",
        "default": false
    },
    "kind2.timeout": {
        "type": "number",
        "scope": "machine-overridable",
        "minimum": 0.0,
        "maximum": 300.0,
        "description": "Wallclock timeout in seconds",
        "default": 0
    },
    "kind2.timeout_wall": {
        "type": "number",
        "scope": "machine-overridable",
        "minimum": 0.0,
        "maximum": 300.0,
        "description": "Wallclock timeout in seconds",
        "default": 0
    },
    "kind2.timeout_analysis": {
        "type": "number",
        "scope": "machine-overridable",
        "minimum": 0.0,
        "maximum": 300.0,
        "description": "Per-analysis wallclock timeout in seconds (0 for none)",
        "default": 0
    },
    "kind2.enable": {
        "type": "string",
        "scope": "machine-overridable",
        "enum": [
            "IC3",
            "BMC",
            "IND",
            "IND2",
            "INVGEN",
            "INVGENOS",
            "INVGENINT",
            "INVGENINTOS",
            "INVGENREAL",
            "INVGENREALOS",
            "C2I",
            "interpreter"
        ],
        "description": "Enable Kind module, repeat option to enable several modules",
        "default": "[BMC, IND, IND2, IC3, INVGEN, INVGENOS, INVGENINTOS, INVGENREALOS]"
    },
    "kind2.disable": {
        "type": "string",
        "scope": "machine-overridable",
        "enum": [
            "IC3",
            "BMC",
            "IND",
            "IND2",
            "INVGEN",
            "INVGENOS",
            "INVGENINT",
            "INVGENINTOS",
            "INVGENREAL",
            "INVGENREALOS",
            "C2I",
            "interpreter"
        ],
        "description": "Disable a Kind module",
        "default": ""
    },
    "kind2.modular": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Bottom-up analysis of each node",
        "default": false
    },
    "kind2.compile": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Nodes proved correct will be compiled to Rust. Note that uninitialized pre's are not allowed in this mode",
        "default": false
    },
    "kind2.lus_strict": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Strict mode in Lustre: uninitialized pre and undefined local variables are not allowed when this flag is present",
        "default": false
    },
    "kind2.qq": {
        "scope": "machine-overridable",
        "description": "Disable output completely",
        "default": ""
    },
    "kind2.q": {
        "scope": "machine-overridable",
        "description": "Disable output, fatal errors only",
        "default": ""
    },
    "kind2.s": {
        "scope": "machine-overridable",
        "description": "Silence output, errors only",
        "default": ""
    },
    "kind2.v": {
        "scope": "machine-overridable",
        "description": "Output informational messages",
        "default": ""
    },
    "kind2.vv": {
        "scope": "machine-overridable",
        "description": "Output informational and debug messages",
        "default": ""
    },
    "kind2.vvv": {
        "scope": "machine-overridable",
        "description": "Output informational, debug and trace messages",
        "default": ""
    },
    "kind2.color": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Display colors in ascii output",
        "default": true
    },
    "kind2.weakhcons": {
        "type": "boolean",
        "scope": "machine-overridable",
        "description": "Use weak hash-consing",
        "default": false
    },
    "kind2.real_precision": {
        "type": "string",
        "scope": "machine-overridable",
        "enum": [
            "rational",
            "float"
        ],
        "description": "Print numbers in either rational or floating point format. In floating-point format f<nn> means a relative error less than 2^-nn",
        "default": "rational"
    }
}